{"version":3,"file":"static/js/884.2448b2ee.chunk.js","mappings":"iOAwFA,UAlFqB,WAAO,IAAD,IACzB,GAA0BA,EAAAA,EAAAA,UAAS,MAAnC,eAAOC,EAAP,KAAcC,EAAd,KACA,GAAkCF,EAAAA,EAAAA,UAAS,CAAC,GAA5C,eAAOG,EAAP,KAAkBC,EAAlB,KACA,GAAkCJ,EAAAA,EAAAA,WAAS,GAA3C,eAAOK,EAAP,KAAkBC,EAAlB,KACQC,GAAYC,EAAAA,EAAAA,MAAZD,QACFE,GAAWC,EAAAA,EAAAA,MAEXC,EAAY,WADEC,EAAAA,EAAAA,QAAM,UAACH,EAASI,aAAV,aAAC,EAAgBC,MACVC,eAAf,QAA0B,KAE5CC,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAc,mCAAG,2FACrBX,GAAa,GADQ,kBAGIY,EAAAA,EAAAA,IAAA,6CACiBX,EADjB,8CAHJ,OAGbY,EAHa,OAMfC,OAAOC,KAAKF,EAASG,MAAMC,OAAS,GACtCnB,EAAae,EAASG,MAPL,gDAUnBpB,EAAS,sDAVU,yBAYnBI,GAAa,GAZM,4EAAH,qDAepBW,GACD,GAAE,CAACV,IAEJ,IAAQiB,EAAqDrB,EAArDqB,YAAaC,EAAwCtB,EAAxCsB,MAAOC,EAAiCvB,EAAjCuB,WAAYC,EAAqBxB,EAArBwB,SAAUC,EAAWzB,EAAXyB,OAClD,OACE,iCACE,SAAC,KAAD,CAAMC,GAAIlB,EAAV,4BACCN,IAAa,sCACH,OAAVJ,IAAkB,uBAAIA,IACZ,OAAVA,GAAkBmB,OAAOC,KAAKlB,GAAWoB,OAAS,IACjD,iCACE,2BACmB,OAAhBC,IACC,gBACEM,IAAG,yCAAoCN,GACvCO,IAAKN,KAGT,4BACE,wBAAKA,KACL,2BACE,yCAAiBC,MACjB,2BACE,sCACA,uBAAIC,QAEN,2BACE,oCACA,uBAAIC,EAAOI,KAAI,SAAAC,GAAK,OAAIA,EAAMC,IAAV,IAAgBC,KAAK,qBAKjD,4BACE,oDACA,2BACE,yBACE,SAAC,KAAD,CAAMN,GAAG,OAAOhB,MAAO,CAAEC,KAAML,GAA/B,qBAIF,yBACE,SAAC,KAAD,CAAMoB,GAAG,UAAUhB,MAAO,CAAEC,KAAML,GAAlC,8BAMN,SAAC,EAAA2B,SAAD,CAAUC,UAAU,gDAApB,UACE,SAAC,KAAD,WAMX,C","sources":["pages/MovieDetails.jsx"],"sourcesContent":["import axios from 'axios';\nimport { Suspense, useRef } from 'react';\nimport { useState } from 'react';\nimport { useEffect } from 'react';\nimport { Link, Outlet, useLocation, useParams } from 'react-router-dom';\n\nconst MovieDetails = () => {\n  const [error, setError] = useState(null);\n  const [movieInfo, setMovieInfo] = useState({});\n  const [isLoading, setIsLoading] = useState(false);\n  const { movieId } = useParams();\n  const location = useLocation();\n  const refLocation = useRef(location.state?.from);\n  const backLinkHref = refLocation.current ?? '/';\n\n  useEffect(() => {\n    const fetchMovieById = async () => {\n      setIsLoading(true);\n      try {\n        const response = await axios.get(\n          `https://api.themoviedb.org/3/movie/${movieId}?api_key=8510e0ad31b6bb4a75e3ab4ea305febb`\n        );\n        if (Object.keys(response.data).length > 0) {\n          setMovieInfo(response.data);\n        }\n      } catch {\n        setError('Oops, something went wrong. please try again later');\n      } finally {\n        setIsLoading(false);\n      }\n    };\n    fetchMovieById();\n  }, [movieId]);\n\n  const { poster_path, title, popularity, overview, genres } = movieInfo;\n  return (\n    <>\n      <Link to={backLinkHref}>‚Üê Go back</Link>\n      {isLoading && <p>Loading...</p>}\n      {error !== null && <p>{error}</p>}\n      {error === null && Object.keys(movieInfo).length > 0 && (\n        <>\n          <div>\n            {poster_path !== null && (\n              <img\n                src={`https://image.tmdb.org/t/p/w300${poster_path}`}\n                alt={title}\n              />\n            )}\n            <div>\n              <h2>{title}</h2>\n              <ul>\n                <li>User Score: {popularity}</li>\n                <li>\n                  <h3>Overview</h3>\n                  <p>{overview}</p>\n                </li>\n                <li>\n                  <h4>Genres</h4>\n                  <p>{genres.map(genre => genre.name).join(', ')}</p>\n                </li>\n              </ul>\n            </div>\n          </div>\n          <div>\n            <h3>Additional information</h3>\n            <ul>\n              <li>\n                <Link to=\"Cast\" state={{ from: location }}>\n                  Cast\n                </Link>\n              </li>\n              <li>\n                <Link to=\"Reviews\" state={{ from: location }}>\n                  Reviews\n                </Link>\n              </li>\n            </ul>\n          </div>\n          <Suspense fallback={<div>Loading subpage...</div>}>\n            <Outlet />\n          </Suspense>\n        </>\n      )}\n    </>\n  );\n};\n\nexport default MovieDetails;\n"],"names":["useState","error","setError","movieInfo","setMovieInfo","isLoading","setIsLoading","movieId","useParams","location","useLocation","backLinkHref","useRef","state","from","current","useEffect","fetchMovieById","axios","response","Object","keys","data","length","poster_path","title","popularity","overview","genres","to","src","alt","map","genre","name","join","Suspense","fallback"],"sourceRoot":""}